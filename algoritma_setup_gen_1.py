# -*- coding: utf-8 -*-
"""Algoritma SETUP Gen 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S1XlXci5mhZ-BnCWUFCNlrKEZKjohzLj
"""

import random
import sympy
import time

"""### Pembentukan Kunci Penyerang"""

def generate_attacker_key(k, E):
    start_time = time.time()
    while True:
        l = int(k/2)
        Q = sympy.randprime(2**(l-1), 2**l)
        P = sympy.randprime(2**(l-1), 2**l)
        N = P * Q
        phi_N = (P - 1) * (Q - 1)
        if sympy.gcd(E, phi_N) == 1:
          D = sympy.mod_inverse(E, phi_N)
          end_time = time.time()
          return (N, E), (N, D), end_time - start_time

# Contoh Penggunaan
generate_E = 65537
att_pub_key, att_priv_key, execution_time = generate_attacker_key(1024, generate_E)
print("Kunci Publik Penyerang (N, E):", att_pub_key)
print("Kunci Privat Penyerang (N, D):", att_priv_key)
print("Waktu Eksekusi:", execution_time, "detik")

"""### Pembentukan Kunci Pengguna"""

def generate_key(k, N, E):
    start_time = time.time()
    while True:
        l = int(k/2)
        q = sympy.randprime(2**(l-1), 2**l)
        p = sympy.randprime(2**(l-1), 2**l)
        n = p * q
        phi_n = (p - 1) * (q - 1)
        e = pow(p, E, N)
        if sympy.gcd(e, phi_n) == 1:
          d = sympy.mod_inverse(e, phi_n)
          end_time = time.time()
          return (n, e), (p, q, d), end_time - start_time

# Contoh Penggunaan
public_key, private_key, execution_time = generate_key(1024, att_pub_key[0], att_pub_key[1])
print("Ukuran Kunci:", 1024, "bit")
print("Kunci Publik (n, e):", public_key)
print("Kunci Privat (p, q, d):", private_key)
print("Waktu Eksekusi:", execution_time, "detik")

"""### Pemulihan Kunci Pengguna"""

def fast_exp_mod(b, exp, m=None):
    # Metode Fast Exponentiation untuk mempercepat proses pemangkatan modulo
    res = 1

    while exp > 0:
        if exp % 2 == 1:
            res = (res * b) % m if m is not None else res * b
        b = (b * b) % m if m is not None else b * b
        exp //= 2

    return res % m if m is not None else res

def factorize(n, N, D, e):
    start_time = time.time()
    p = fast_exp_mod(e, D, N)
    q = n // fast_exp_mod(e, D, N)
    end_time = time.time()
    return p, q, end_time - start_time

p, q, execution_time = factorize(public_key[0], att_priv_key[0], att_priv_key[1], public_key[1])
print("Prima p dan q untuk ukuran ", 1024, " bit :", (p,q))
print("Waktu Eksekusi:", execution_time, "detik")
